#!/usr/bin/env python
"""
Test script for the password vulnerability endpoint.
This script tests the vulnerability assessment for different types of passwords.
"""

import requests
import json
import sys
from typing import Dict, Any

# Configure the API URL
API_URL = "http://localhost:8000/vulnerability"

# Test passwords with different characteristics
test_passwords = [
    # Common weak passwords
    "password123",
    "admin",
    "qwerty",
    "letmein",
    
    # Medium strength
    "Tr0ub4dor&3",
    "P@$$w0rd!",
    
    # Strong passwords
    "d8&*3Lp9^aQ!zK7#",
    "correct-horse-battery-staple",
    
    # Non-Latin scripts
    "γεια σου Μπάι",  # Greek
    "привет2023",     # Cyrillic
    "こんにちは世界",    # Japanese
    "नमस्ते123",      # Devanagari
    
    # Mixed scripts
    "Pass@γεια123",   # Latin+Greek
    "Merhaba世界",    # Latin+Japanese
]

def test_vulnerability_endpoint(password: str) -> Dict[str, Any]:
    """
    Test the vulnerability endpoint with a given password.
    
    Args:
        password: The password to test
        
    Returns:
        Dict: The response from the API
    """
    try:
        response = requests.post(
            API_URL,
            json={"password": password},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Error: Received status code {response.status_code}")
            print(f"Response: {response.text}")
            return {}
    except Exception as e:
        print(f"Error making request: {str(e)}")
        return {}

def display_vulnerability_results(password: str, results: Dict[str, Any]) -> None:
    """
    Display vulnerability assessment results in a readable format.
    
    Args:
        password: The password that was tested
        results: The vulnerability assessment results
    """
    print(f"\n{'='*60}")
    print(f"Password: {password}")
    print(f"{'='*60}")
    
    if not results:
        print("No vulnerability assessment data received")
        return
    
    for attack_type, details in results.items():
        risk = details.get("risk", "Unknown")
        description = details.get("description", "No description available")
        
        # Format attack type name for display
        attack_name = attack_type.replace("_", " ").title()
        
        # Color coding based on risk level
        if risk == "Very High":
            risk_formatted = f"\033[91m{risk}\033[0m"  # Red
        elif risk == "High":
            risk_formatted = f"\033[91m{risk}\033[0m"  # Red
        elif risk == "Moderate":
            risk_formatted = f"\033[93m{risk}\033[0m"  # Yellow
        elif risk == "Low":
            risk_formatted = f"\033[92m{risk}\033[0m"  # Green
        elif risk == "Very Low":
            risk_formatted = f"\033[92m{risk}\033[0m"  # Green
        else:
            risk_formatted = risk
        
        print(f"- {attack_name}: {risk_formatted}")
        print(f"  {description}")
        print()

def main() -> None:
    """Run vulnerability tests for all test passwords"""
    print("Testing Password Vulnerability Assessment API")
    print("--------------------------------------------")
    
    for password in test_passwords:
        results = test_vulnerability_endpoint(password)
        display_vulnerability_results(password, results)

if __name__ == "__main__":
    main() 